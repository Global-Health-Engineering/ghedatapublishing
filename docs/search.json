[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Publishing with washr",
    "section": "",
    "text": "Welcome\nPublishing data can be challenging, especially when adhering to standards of reproducibility. Although technically available, an Excel workbook with multiple tabs, tucked away in an online archive, is far from practical. In other words, it lacks the key principles of being findable, accessible, interoperable, and reproducible — commonly known as FAIR.\nThis guide aims to provide a detailed walkthrough of how data can be published according to the FAIR principles. It builds on washr, an R package developed for swift data publication. The package emerged from the need to streamline certain steps when publishing the numerous datasets collected during GHE’s openwashdata academy.\nThe guide follows a chronological structure, starting from an empty repository and resulting in the publication of data as a website. 1  Creating a repository introduces version control, guiding readers through setting up both local and remote repositories to track all development steps. 2  Preparing your dataset focuses on transforming the dataset into a tidy format. 3  Documenting Your Dataset covers the documentation of the tidy dataset. Finally, 4  Publishing Your Dataset explains how users can create a website to showcase their dataset.\nThis book is a work in progress. As we publish more data, we learn more and these insights flow back into this book. If something is unclear or incomplete, please open an issue here and we’ll try to address it.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "creating_repo.html",
    "href": "creating_repo.html",
    "title": "1  Creating a repository",
    "section": "",
    "text": "Note\n\n\n\nThe following steps assume that you are a member of GHE on GitHub. If you are not, reach out here so we can create a repository for you.\n\n\nAs your very first step, you have to create a new repository within the Global Health Engineering (hereafter referred to as GHE) organization on GitHub. You can do this here.\nChoose a name for your repository, make it public if you’re data is not confidential/sensitive and click on “Create repository”. For now, you don’t need a README, .gitignore file or a license. You’ll add these at a later stage.\nOnce the repository is initialized, go back to RStudio and check if the devtools and usethis packages are installed. If not, please install/update them now as some of their functions are needed in the next steps.\nNext, you have to create an R Project. Go to File &gt; New Project &gt; New Directory &gt; R Package using devtools.\n\n\n\n\n\nCopy and paste the name you chose for your GitHub repository as the directory name and select a location on your computer for your new project.\n\n\n\n\n\n\nNote\n\n\n\nFor the next steps, we assume that you’ve already configured Git on your computer. If not, please make sure to do that before proceeding.\n\n\nWith your project set up locally and a new repository online, it’s time to connect the two. To do this, switch to the Terminal (the tab next to Console in RStudio) and run the following commands one after the other.\n\n\n\n\n\n\nWarning\n\n\n\nReplace REPO with the name of your newly created repository.\n\n\ngit remote add origin \"https://github.com/Global-Health-Engineering/REPO.git\" \n\ngit branch -M main\n\ngit push -u origin main\nIf everything went well, you’re local repository (on your computer) should now be connected to the remote repository (on GitHub) which allows you to push and pull changes and to invite collaborators.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Creating a repository</span>"
    ]
  },
  {
    "objectID": "data_preparation.html",
    "href": "data_preparation.html",
    "title": "2  Preparing your dataset",
    "section": "",
    "text": "2.1 Clean and Process Your Raw Data\nOpen the file data-raw/data_processing.R in your RStudio editor, which contains some pre-populated code. You’ll need to modify this script to fit your specific data cleaning needs. Add your own R code to clean and process your raw data files, ensuring that the script reads the files from the data-raw directory and outputs a tidy, well-organized version of the data.\nAfter you’ve finished editing data_processing.R, run the entire script to execute your data cleaning process. You can do this by clicking “Source” at the top of the editor window, or by selecting all the code and clicking “Run.” This will process your raw data and produce a tidy version of the dataset, ready for analysis.\nReturn to the “Git” tab in RStudio, where you should see your modified data_processing.R file, along with any new output files that may have been generated. Commit these changes by entering a meaningful commit message, such as “Clean and process raw data.” Once you’ve committed the changes, push them to GitHub to ensure your updates are saved and accessible.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Preparing your dataset</span>"
    ]
  },
  {
    "objectID": "data_preparation.html#creating-a-data-dictionary",
    "href": "data_preparation.html#creating-a-data-dictionary",
    "title": "2  Preparing your dataset",
    "section": "2.2 Creating a Data Dictionary",
    "text": "2.2 Creating a Data Dictionary\n\n2.2.1 Set Up the Dictionary Template\nIn your R console, execute the command setup_dictionary(). This will create a new file called dictionary.csv in your data-raw directory.\n\n\n2.2.2 Fill in the Data Dictionary\nNext, open data-raw/dictionary.csv in a spreadsheet program like Excel or in RStudio’s data viewer. You will see columns corresponding to each dataset and variable in your tidy data. Focus on the “description” column: for each row representing a variable, provide a clear and concise description of what that variable represents. Include relevant information such as units of measurement, possible values, or any other pertinent details. Once you’ve completed this, save your changes to dictionary.csv.\n\n\n2.2.3 Update GitHub with Your Data Dictionary\nReturn to the “Git” tab in RStudio, where you should see the modified dictionary.csv file. Commit these changes with a message like “Add data dictionary,” and then push your changes to GitHub.\nFinally, review your GitHub repository online to ensure that all your changes have been uploaded correctly. You should now have a data-raw directory containing your original data files, a data_processing.R script in which you clean your data, and a dictionary.csv file describing your tidy dataset.\nCongratulations! You’ve successfully prepared your dataset and created a data dictionary, all while maintaining version control with Git and GitHub.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Preparing your dataset</span>"
    ]
  },
  {
    "objectID": "data_documentation.html",
    "href": "data_documentation.html",
    "title": "3  Documenting Your Dataset",
    "section": "",
    "text": "3.1 Setting Up and Writing Documentation with Roxygen\nTo begin documenting your dataset, start by initializing Roxygen documentation. Open your R console within the project and run the following command:\nsetup_roxygen()\nThis will create the necessary documentation files in the R/ folder of your project, setting up the foundation for detailed documentation.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Documenting Your Dataset</span>"
    ]
  },
  {
    "objectID": "data_documentation.html#setting-up-and-writing-documentation-with-roxygen",
    "href": "data_documentation.html#setting-up-and-writing-documentation-with-roxygen",
    "title": "3  Documenting Your Dataset",
    "section": "",
    "text": "3.1.1 Writing Documentation\nOnce the documentation files are generated, navigate to the R/ folder in your project. Each file in this folder, with a .R extension, represents a dataset or function. Open these files and provide a human-readable title and description using Roxygen comments (lines that start with #'). For instance, you could use the following format to document your dataset:\n#' Title of Your Dataset\n#'\n#' A brief description of what the dataset contains and its purpose.\n#'\n#' @format A data frame with X rows and Y columns:\n#' \\describe{\n#'   \\item{column1}{Description of column1}\n#'   \\item{column2}{Description of column2}\n#'   ...\n#' }\n#' @source Where the data comes from (if applicable)\n\"dataset_name\"\nThis method allows you to provide clear, concise details about each dataset, ensuring that users understand its structure and purpose.\n\n\n3.1.2 Updating Your GitHub Repository\nOnce you’ve completed the documentation, it’s time to update your GitHub repository. In RStudio, go to the “Git” tab. Stage all the changed files by checking the boxes next to them, then click “Commit”. Write a meaningful commit message, such as “Add Roxygen documentation for dataset”, and click “Push” to update your repository with the latest changes.\n\n\n3.1.3 Finalizing and Installing the Documentation\nNow that your documentation is written, run the following commands in your R console:\n\ndevtools::document()\ndevtools::check()\ndevtools::install()\n\nThese commands will generate the documentation from your Roxygen comments, check for any issues in the package, and install it locally. If you receive a warning about the license, don’t worry, as it will be addressed in the next section.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Documenting Your Dataset</span>"
    ]
  },
  {
    "objectID": "data_documentation.html#updating-the-description-file",
    "href": "data_documentation.html#updating-the-description-file",
    "title": "3  Documenting Your Dataset",
    "section": "3.2 Updating the DESCRIPTION File",
    "text": "3.2 Updating the DESCRIPTION File\nTo complete your package documentation, you’ll need to update the DESCRIPTION file with author information and other key details.\n\n3.2.1 Adding Yourself as an Author\nIn your R console, add yourself as the author and maintainer by running:\n\nuse_author(\n  given = \"Your First Name\", \n  family = \"Your Last Name\", \n  role = c(\"aut\", \"cre\"), \n  email = \"your.email@example.com\",\n  comment = c(ORCID = \"XXXX-XXXX-XXXX-XXXX\")\n)\n\nHere, aut indicates that you are an author, and cre designates you as the creator or maintainer of the package.\n\n\n3.2.2 Documenting Other Contributors\nTo ensure proper credit is given, create a new issue in your GitHub repository titled “Author Information for DESCRIPTION File”. List all contributors, including their full name, email address, role (e.g., aut for authors or ctb for contributors), and ORCID (if applicable).\nFor each additional contributor, run a similar command:\n\nuse_author(given = \"Coauthor First Name\", family = \"Coauthor Last Name\", role = \"aut\")\n\n\n\n3.2.3 Updating the DESCRIPTION File\nAfter adding all contributors, open the DESCRIPTION file in your project and ensure the title and description reflect the purpose of your package accurately. Then, in your R console, run:\n\nupdate_description()\n\nThis will update fields such as version, authors, and dependencies. Review the DESCRIPTION file to make sure all information is accurate.\n\n\n3.2.4 Final Documentation Check\nTo complete the process, run the following commands again:\n\ndevtools::document()\ndevtools::check()\ndevtools::install()\n\nThese steps will ensure your package is fully documented, checked for errors, and ready for use.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Documenting Your Dataset</span>"
    ]
  },
  {
    "objectID": "data_publication.html",
    "href": "data_publication.html",
    "title": "4  Publishing Your Dataset",
    "section": "",
    "text": "4.1 Creating and Editing the README\nTo start documenting your dataset for publication, you first need to set up a README file.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Publishing Your Dataset</span>"
    ]
  },
  {
    "objectID": "data_publication.html#creating-and-editing-the-readme",
    "href": "data_publication.html#creating-and-editing-the-readme",
    "title": "4  Publishing Your Dataset",
    "section": "",
    "text": "4.1.1 Initialize the README\nIn your R console, within the project directory, run the following command to create a README file:\n\nsetup_readme()\n\nIf you want to include an example article for your package, you can use this command instead:\n\nsetup_readme(has_example = TRUE)\n\n\n\n4.1.2 Editing the README\nLocate the README.Rmd file in your project directory and open it. Edit each section of the README to provide relevant information about your package. Typical sections include:\n\nPackage Name and Brief Description\nInstallation Instructions\nBasic Usage\nFeatures\nExample\n\n\n\n4.1.3 Creating a Data Visualization\nIn the “Example” section of your README, it’s helpful to include at least one plot that showcases your data. For instance, using ggplot2, you could create a plot like this (adapt it to fit your specific data):\n\nlibrary(ggplot2)\nlibrary(yourpackagename)\n\nggplot(your_data, aes(x = variable1, y = variable2)) +\n  geom_point() +\n  theme_minimal() +\n  labs(title = \"Example Plot from YourPackageName\")\n\n\n\n4.1.4 Building the README\nOnce you’ve completed editing the README, convert it to a Markdown file by running:\n\ndevtools::build_readme()\n\nThis will generate a README.md file, which GitHub displays on your repository’s main page.\n\n\n4.1.5 Updating GitHub\nAfter building the README, go to the “Git” tab in RStudio. Stage the newly created or modified README files, commit them with a message such as “Add and update README,” and push the changes to GitHub.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Publishing Your Dataset</span>"
    ]
  },
  {
    "objectID": "data_publication.html#setting-up-the-package-website",
    "href": "data_publication.html#setting-up-the-package-website",
    "title": "4  Publishing Your Dataset",
    "section": "4.2 Setting Up the Package Website",
    "text": "4.2 Setting Up the Package Website\nTo enhance your package’s accessibility, you can create a website for it.\n\n4.2.1 Initializing the Website\nRun the following command in your R console:\n\nsetup_website()\n\nWhen prompted, choose “No” to prevent overwriting the existing _pkgdown.yml file. This preserves the styling for your website.\n\n\n4.2.2 Document, Check, and Install the Package\nEnsure your package is up-to-date by running the following commands:\n\ndevtools::document()\ndevtools::check()\ndevtools::install()\n\nThese commands generate the latest documentation, check the package for issues, and install it locally.\n\n\n4.2.3 Preparing for GitHub Pages\nTo host the package website on GitHub Pages, you first need to make sure Git tracks the necessary files. Open the .gitignore file in your project directory, find the line that says docs, and remove it. Save the file to allow the docs/ folder to be tracked by Git.\n\n\n4.2.4 Updating GitHub with Website Files\nGo to the “Git” tab in RStudio. You should now see new files in the docs/ folder and the updated .gitignore file. Stage these changes, commit them with a message like “Add pkgdown website files,” and push the updates to GitHub.\n\n\n4.2.5 Setting Up GitHub Pages\nTo activate the website, open your GitHub repository in a web browser. Go to “Settings” &gt; “Pages.” Under “Source,” select the branch where your docs/ folder resides (usually “main” or “master”) and set the folder to /docs. Finally, click “Save.”\nYour package website will now be live at https://yourusername.github.io/yourrepositoryname/.\nRemember, if you make significant changes to your package or documentation, you may need to rebuild the website by running pkgdown::build_site() and pushing the updated docs/ folder to GitHub.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Publishing Your Dataset</span>"
    ]
  },
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "5  Troubleshooting",
    "section": "",
    "text": "5.1 Git fails when pushing commit to github\nIf you want to push large files (e.g. raw datasets) to GitHub, Git may fail. A simple workaround is to increase the buffer size. You can do this with the following line in the terminal. Note that you need to be in the working directory of your project.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "troubleshooting.html#git-fails-when-pushing-commit-to-github",
    "href": "troubleshooting.html#git-fails-when-pushing-commit-to-github",
    "title": "5  Troubleshooting",
    "section": "",
    "text": "git config http.postBuffer 524288000",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  }
]